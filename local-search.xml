<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>介绍一下如何提交文章</title>
    <link href="/posts/5e72dd04/"/>
    <url>/posts/5e72dd04/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="bc68732b520b55d4ebfadb1ad3491d3acda8f0ca71df3e0aeb26d0671a05e41e">10d79030e8222445804370796b90fca1cf7dd2ee01010d95413afa643c36d75c6da7dc8584583c53132d123565a83bc482d57efe09dbb13f6be1ebadf67b396c5e9af14ae37a94b87d779719bc8c1cd1a95420a6d53586101970b6bd1e11383c5fb9eb6a2afd2dfd764940c736e232c31819ba63da4a7c6eb6c1003cc6443dcf2082b9f749ca03a1484b87b08c908b3c310d7b631064a7fc3f9ca36177e4c3059978875c3caa78a7dceb6037a9522caf5c4adf858dd97440561f76a5ba5e4fd77e9898dfeb4cad54c4bb643f9c0ecbaef49a3431bdd2455830a88255232397afbbe9b23eb9395dfae6f0824e03416bc0b3804386abdc6c923976a913424fdbf1ba89bde972822239ac5e9109f398b65ae65ef00629508a203d30649f6408e1f61f5f6e73d99349907d745bd4c4ef0763621826913a2677273e3b66ae19439d1940d9ebcc45d324738506f0ac5dca5093adf45b82a24da2d49432e9f7cea3b56d73ea8b80628014008c75e6df0aa070ccdaa53907f1adc5e6234b2ab2f7f8485fb9383dc64927d631e20713c7d719815e20c9d6247aa120998e681a19e43d40ca49e20ce7419d535072ff85e74c96caabe848f11f049126a6f4cbbfc746a3cae3d4b6c98db711e8b3bdbd372def67e3d1bf776ee35037a2377d5898704789976ec22fc47c64eb83da5766f0408afee5b438701c6084a1025c673100e7ac0cf710407782790b56679a3fbb40313022e90f715c1a39914fe4b710beb621310bee163ece727a9d02da8b2ef0925acbeedbed1bdf2fb2a5a106956f607dcb5fcef0e36a97afa6fe5d415be51d647cc196fec6186575845eba2577edf79b237f40501d9e0516fe26fcc18e5bb029218ceea51ed6571ed6499c1b863fe5e4184373aee7af54e687aecc3ffa4986afe90e3a5fd67d73f47c0c882443054fed1625259e96370f07d55431f1a03130d5486c9ac1bc2c51d48a7b31ca8c81fdd6cc8795e3296ee5cc4dd66f3e582583d5516a299f41c5bc32710ee392ddb18d02b9fea50df38fbea6579d1f8a7a1ec2fdcff1a546b814a5a1a9b6de235f8bec004545adfaf2f0e461b5f427cac3fc691aa9edb943d5850ffd603a61acdde57fdd6695365d7545ae09b0febf35c90b0ad927af244e7e4c6de2b4167813388fa8aaae8a56c4f9d198c0c101ac9464e7a3717f9413cbbacb93d46cac92c7a19af455364d43a0b45c993fd8a5998589b3836122bb1562811d7c3d1f486b9f0adb0753fbedfe974213dc090ce2b6f3c875ddd6d39a34739526a81e1bd353b61527691c945921dcac2cba60a8f92c105e4e543df39ccf78e1f6c06ffe2cdd6c5f5a0d73eee1c4e9736397bca99f36eee5541ed37c2f906196441fcc4fba02e1c13aa45e04afd16a88d56128201c8fcdbc46131578f5908a5a4a57c04a200edbb384864828df0f88d08bb0564524c5a5bc5f7d10cb0ed456f8ea760f8d4703f35dd8c6f0fdee3466f1a9ebe49ff9f20c01c924751e66be903e0cd26c2a80c93fcc7f36482dac9da1e0037364a798de5f78e95f1e72195555c46fda84f806f2af6a36a997a2825e917f4da687289e1a7a9f406cbdd73d48c097223725dd37b2217ef6c2b1278b453e7214179ff65267c3bc128cb0c8e9dec73ee30220e305f7decbd46d27a1ebc4c102a1900bfbc5ece518abb9a41679c062b2f8a295f92c8cc1c93d8ab311d1c883047003eebd98c8a2c2f0493a4fb93781c2399b11d4ce8cbb6baf615680e3730c5564a5ce96bbcaa72bab20fcfe8dc2b3fa2e077cccab3a61547f7a562859a2a79a3dd5837ec78d3a6b82dd98b96803a682b8967b3bb7324055a0f91167e37c47e2bb9f5eb1b9b2f2ebddc0b9aa517cfd53af5a2ec8f0bc8c16f462ca645cb97c5ac6976fbc083607848b5b317ebd2829d80f8a20d5f629c8cce328bbf65a6808e8f6f9824047be241c48f8ebda67c955b3bbeb869295135d6f3ad1548b0d6cc9ad1a4587bfdc58a6aef4fc7a29bab25fcdc3794c97693f137534b89368820c3f94d4022c9652747601ec2885e592f2dae2f3417e7bfeccf7b3b227af35b94fc767cfc162379f4ff8718cc2a402f9a5546b39b25d4af932bc5534f8c99fe43836e1f7bcb8e865eaa9391fc963895f536d072e8239f71fbbf394b3a2c25bea4f67ccabad99c8e94777dedc77961f77a1c0037f357666c33ad8f148f7b20565701ea0a243ee742bb11a530b7ad67cc9ede5e1c32e6b403d735d4e2e604cc1cf960e63c0c344baeb5d636eb4ba169576d907aa15e8d17a3f9b7221ad77a4ee97b58ca41cf3960172ff14981ed15252adf26b3573b2b2f1cd27c6306ad3934031d18d74302d9b39ea7bbfbadbd40cffe9a1f970ae77079754a85cfc490263907294afaa0a803b173c1d55c7509de3f66f038badfcbfd0389d7c625f0586c9042ac29cb87bfceffae8d7cb92714d13d7a688b8379c53a34512cdc31f2131409977e6e465a0cb1c6baa9461eda5ef8798efc0cc1dcdd15a9d7ec0a6dae2e719e8b245da97ebd32803a8854d10b04c64336aaf079db6b4e1446457ed8090da82ed305584d66b5d2cddcda0140a369e3eddb8e048135f7bc8e9624817edd72357d12a6bfcbaf902d18bd87d6d668b97eb38a2c2ec9ce1557e3135bb7a30eacdc6fb58ac4c974a5d44ff57cea04ca67b5631a6be2d1e68a656d0f2b357906744ca4640472973dec08ffd3368362df828a9b04aadd742ba14f9cd0bbe5ee78007bd59eed3b11ab14c525ca5a666cb5db7a3160ce72c9384fe03a6aff36304356a1107bff7206c1403e170af861fa0f4a398b4e7b8452d3630174624ddda010566b03871b843bf03872ab90931a14717c4cafa9f5eee7feb3bbfb53070a5a37fb141aa329bc0161f1868fd7fe6922ee078d0f4dc2c550ef8c695dc9446416cd731c1617affe08e5dcff2635d6f8c7cdfcc7b436a5f57cd620fccf2c142415788555978bdb2f88b5abd54c01c27b730f32bc7fe4d4bfb6b8603fa7431a50885d86c796a8d2bc897c8e37d7469cd9b4b96953c824251916796bcb69ecf4f899a6b9711595e8cbab5e53392c7eab7a2e49132d9c2f6ea31867434cdd80f098e3ff5e5504f36ce9be2b4fdf3ffc0d21f24618cbf6af2195a36b66b5002d0e131b09f32de9617f60803309a683148065274a3fc15abb5d7d2448d5f1ac0a84e25334d942301641b87bffcbbd5c37a95b6245c736b52f5787837092d0b8eef5e561db65b86e0e81b1c55a3ac0769563299f81705f756dd3406e2a73b6815c6c964cb5ae3d4c9121144bc476c7d2ac6c2bb57d25e766c560613f655345004d8a72c9d3d4ff14e1a148b5cbb11dfd80fdbc19f4965472910687fbd05c700c1c7a5358d27968d5f4842b5b3d7fc43e133de1e4a851d33d54104244f4297a3b76cf2c83935ee63892803b77c4d5cfa9046c92c2668445adcae178b0f9add6cb9288a1a7f9077d50f255612d2641af879884b885f1e22915c16df0646718f6ee25ae610b25b14284cc422f8cf61e35c750f7f119b56b118551e3e30c595375bbc0862ee5c2014d40840af4b1439bbffddbc7c197c3e670815344634f937aa267476dc694a01752b5705a577faa66c4f2bfb3591d4bd381be0e2d6146afcc8d8ee5ebe9d8ee251bfb7c170cf6b2cb4ca3c69b5dcbcbcd733d34e06dfca431298d59873ffde3573171af33e0e4dd97389ce2462fada5033c57cca7cb5f681cb2e6e7e09f1f54eb1f9460631d34520bbbd3cc28bd7f12e7812cf81459231cbab684f5a801acab7bd4ac4516089877dc92bdbd7ac176eb4ab27a5e7692ce0696b415c2c345461f693d8b1e984c9289e7d710df1c73c979dad171c7e48d2712372568968f460e478a0c0c551b2bbb36fb1abed6f71003fdf85a668f6cf3ad76a2dc0acd20756441c779ca12f39020be7e974fc254448f60e5b2f99bdf13b8986f685fcfbde9387386a4ae8be3473751f0f735ce3f7c355f506be57dbbfba85a919ab04891cebcf01068ac1332ec98804253140b99297b4af7589da71cd4cd9de0ff8eb651509079c8e86845821c3502a76af1bea59efb6ab690383fc1870f9851a5883858c4e2cfa06de3abaa8c93f978672f54db7b01f9fcc8b5b4b07be5f6b65d8726f2d9d1bf8e1acd215d22e1f4e4a1b03bffd4db5be73788b91e78a8658aa9577a19dc109c28a1366600c3f2c757e6efd441f3009f96bc67f12d221392b597819d95d871c242a8f6b98c86d04dadcbc5be340d53312c87a7f2672322067ba0a615f4fb1b55b22d7b1417b941c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">猜猜密码是啥?</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>博客操作</category>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>Fluid</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>七夕节专属网页</title>
    <link href="/posts/f20f8f03/"/>
    <url>/posts/f20f8f03/</url>
    
    <content type="html"><![CDATA[<h2 id="浏览指南"><a href="#浏览指南" class="headerlink" title="浏览指南"></a>浏览指南</h2><p>首先浏览这个<a href="https://sheshuchen.github.io/love/">页面</a><br><img src="/img/%E4%B8%BB%E9%A1%B5.png"><br>点击MUSIC按钮，即可播放音乐<br>点击小彩蛋按钮，即可进入<a href="https://sheshuchen.github.io/loveltt/">七夕节专属网页</a>。<br><img src="/img/2.png"><br>点击爱心，也有音效可以欣赏<br><img src="/img/3.png"><br>在七夕节专属网页<br><img src="/img/4.png"><br>点击红心，播放音乐和动画，左下角有一个隐蔽的小彩蛋按钮，可以到一个<a href="https://sheshuchen.github.io/lttphoto/">仿照百度的页面</a>，使用这个搜索引擎之后会跳转到一个<a href="https://sheshuchen.github.io/lttphoto/show.html">表白页面</a>。</p>]]></content>
    
    
    <categories>
      
      <category>恋爱</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>关于我</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>陋室空堂，当年笏满床；衰草枯杨，曾为歌舞场；蛛丝儿结满雕梁，绿纱今又糊在蓬窗上。说甚么脂正浓、粉正香，如何两鬓又成霜？昨日黄土陇头埋白骨，今宵红绡帐底卧鸳鸯。金满箱，银满箱，转眼乞丐人皆谤；正叹他人命不长，那知自己归来丧？训有方，保不定日后作强梁。择膏梁，谁承望流落在烟花巷！因嫌纱帽小，致使锁枷扛；昨怜破袄寒，今嫌紫蟒长：乱哄哄你方唱罢我登场，反认他乡是故乡；甚荒唐，到头来都是为他人作嫁衣裳。</p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[#!/usr/bin/env node'use strict';const {spawn} = require('child_process');const mozjpeg = require('.');const input = process.argv.slice(2);spawn(mozjpeg, input, {stdio: 'inherit'}).on('exit', process.exit);]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[{"name":"mozjpeg","version":"7.1.1","description":"mozjpeg wrapper that makes it seamlessly available as a local dependency","license":"MIT","repository":"imagemin/mozjpeg-bin","bin":"cli.js","engines":{"node":">=10"},"scripts":{"postinstall":"node lib/install.js","test":"xo && ava --timeout=120s","build-linux":"docker build --tag imagemin/mozjpeg docker && docker run --rm --volume $(pwd)/vendor/linux:/src/out imagemin/mozjpeg cp cjpeg /src/out"},"files":["index.js","cli.js","lib","vendor/source"],"keywords":["imagemin","jpeg","jpg","img","image","compress","minify","mozjpeg","optimize"],"dependencies":{"bin-build":"^3.0.0","bin-wrapper":"^4.0.0"},"devDependencies":{"ava":"^3.8.0","bin-check":"^4.1.0","compare-size":"^3.0.0","execa":"^4.0.0","tempy":"^0.5.0","xo":"^0.30.0"},"ava":{"serial":true}}]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA['use strict';module.exports = require('./lib').path();]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h1 id="mozjpeg-bin"><a href="#mozjpeg-bin" class="headerlink" title="mozjpeg-bin "></a>mozjpeg-bin <img src="https://github.com/imagemin/mozjpeg-bin/workflows/test/badge.svg?branch=master" alt="GitHub Actions Status"></h1><blockquote><p><a href="https://github.com/mozilla/mozjpeg">mozjpeg</a> is a production-quality JPEG encoder that improves compression while maintaining compatibility with the vast majority of deployed decoders</p></blockquote><p>You probably want <a href="https://github.com/imagemin/imagemin-mozjpeg"><code>imagemin-mozjpeg</code></a> instead.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> mozjpeg<br></code></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123;execFile&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>);<br><span class="hljs-keyword">const</span> mozjpeg = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mozjpeg&#x27;</span>);<br><br><span class="hljs-title function_">execFile</span>(mozjpeg, [<span class="hljs-string">&#x27;-outfile&#x27;</span>, <span class="hljs-string">&#x27;output.jpg&#x27;</span>, <span class="hljs-string">&#x27;input.jpg&#x27;</span>], <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Image minified!&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm install <span class="hljs-comment">--global mozjpeg</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">mozjpeg --<span class="hljs-built_in">help</span></span><br></code></pre></td></tr></table></figure><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>MIT © <a href="https://github.com/imagemin">Imagemin</a></p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[#!/usr/bin/env node'use strict';const {spawn} = require('child_process');const optipng = require('.');const input = process.argv.slice(2);spawn(optipng, input, {stdio: 'inherit'}).on('exit', process.exit);]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[#!/usr/bin/env node'use strict';const {spawn} = require('child_process');const jpegtran = require('.');const input = process.argv.slice(2);spawn(jpegtran, input, {stdio: 'inherit'}).on('exit', process.exit);]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h1 id="optipng-bin"><a href="#optipng-bin" class="headerlink" title="optipng-bin "></a>optipng-bin <img src="https://github.com/imagemin/optipng-bin/workflows/test/badge.svg" alt="GitHub Actions Status"></h1><blockquote><p><a href="http://optipng.sourceforge.net/">OptiPNG</a> is a PNG optimizer that recompresses image files to a smaller size, without losing any information</p></blockquote><p>You probably want <a href="https://github.com/imagemin/imagemin-optipng"><code>imagemin-optipng</code></a> instead.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm install <span class="hljs-comment">--save optipng-bin</span><br></code></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123;promisify&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123;execFile&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>);<br><span class="hljs-keyword">const</span> optipng = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;optipng-bin&#x27;</span>);<br><br><span class="hljs-keyword">const</span> execFileP = <span class="hljs-title function_">promsify</span>(execFile);<br><br>(<span class="hljs-title function_">async</span> () =&gt; &#123;<br><span class="hljs-keyword">await</span> <span class="hljs-title function_">execFile</span>(optipng, [<span class="hljs-string">&#x27;-out&#x27;</span>, <span class="hljs-string">&#x27;output.png&#x27;</span>, <span class="hljs-string">&#x27;input.png&#x27;</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Image minified!&#x27;</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure><h2 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">$ npm install --<span class="hljs-keyword">global</span> optipng-<span class="hljs-built_in">bin</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">optipng --<span class="hljs-built_in">help</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[{"name":"optipng-bin","version":"7.0.1","description":"OptiPNG wrapper that makes it seamlessly available as a local dependency","license":"MIT","repository":"imagemin/optipng-bin","bin":{"optipng":"cli.js"},"engines":{"node":">=10"},"scripts":{"postinstall":"node lib/install.js","test":"xo && ava --timeout=120s"},"files":["index.js","cli.js","lib","vendor/source"],"keywords":["imagemin","compress","image","minify","optimize","png","optipng"],"dependencies":{"bin-build":"^3.0.0","bin-wrapper":"^4.0.0"},"devDependencies":{"ava":"^3.15.0","bin-check":"^4.0.1","compare-size":"^3.0.0","execa":"^5.0.0","tempy":"^1.0.0","xo":"^0.38.1"}}]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA['use strict';module.exports = require('./lib').path();]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA['use strict';module.exports = require('./lib/index.js').path();]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[{"name":"jpegtran-bin","version":"5.0.2","description":"jpegtran (part of libjpeg-turbo) bin-wrapper that makes it seamlessly available as a local dependency","license":"MIT","repository":"imagemin/jpegtran-bin","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"sindresorhus.com"},"maintainers":[{"name":"Kevin Mårtensson","email":"kevinmartensson@gmail.com","url":"github.com/kevva"},{"name":"Shinnosuke Watanabe","url":"github.com/shinnn"}],"bin":{"jpegtran":"cli.js"},"engines":{"node":">=10"},"scripts":{"postinstall":"node lib/install.js","test":"xo && ava --timeout=120s"},"files":["index.js","cli.js","lib","test","vendor/source"],"keywords":["imagemin","compress","image","img","jpeg","jpg","minify","optimize","jpegtran"],"dependencies":{"bin-build":"^3.0.0","bin-wrapper":"^4.0.0","logalot":"^2.0.0"},"devDependencies":{"ava":"^3.8.0","bin-check":"^4.0.1","compare-size":"^3.0.0","execa":"^4.0.0","tempy":"^0.5.0","xo":"^0.30.0"}}]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h1 id="jpegtran-bin"><a href="#jpegtran-bin" class="headerlink" title="jpegtran-bin "></a>jpegtran-bin <a href="https://travis-ci.org/imagemin/jpegtran-bin"><img src="https://travis-ci.org/imagemin/jpegtran-bin.svg?branch=master" alt="Build Status"></a></h1><blockquote><p><a href="http://libjpeg-turbo.virtualgl.org/">libjpeg-turbo</a> is a derivative of libjpeg that uses SIMD instructions (MMX, SSE2, NEON) to accelerate baseline JPEG compression and decompression on x86, x86-64, and ARM systems. On such systems, libjpeg-turbo is generally 2-4x as fast as the unmodified version of libjpeg, all else being equal.</p></blockquote><p>You probably want <a href="https://github.com/imagemin/imagemin-jpegtran"><code>imagemin-jpegtran</code></a> instead.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm install <span class="hljs-comment">--save jpegtran-bin</span><br></code></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123;execFile&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>);<br><span class="hljs-keyword">const</span> jpegtran = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jpegtran-bin&#x27;</span>);<br><br><span class="hljs-title function_">execFile</span>(jpegtran, [<span class="hljs-string">&#x27;-outfile&#x27;</span>, <span class="hljs-string">&#x27;output.jpg&#x27;</span>, <span class="hljs-string">&#x27;input.jpg&#x27;</span>], <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Image minified!&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">$ npm install --<span class="hljs-keyword">global</span> jpegtran-<span class="hljs-built_in">bin</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">jpegtran --<span class="hljs-built_in">help</span></span><br></code></pre></td></tr></table></figure><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>MIT © <a href="https://github.com/imagemin">Imagemin</a></p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA['use strict';const path = require('path');const BinWrapper = require('bin-wrapper');const packageJson = require('../package.json');const url = `https://raw.githubusercontent.com/imagemin/optipng-bin/v${packageJson.version}/vendor/`;module.exports = new BinWrapper().src(`${url}macos/optipng`, 'darwin').src(`${url}linux/x86/optipng`, 'linux', 'x86').src(`${url}linux/x64/optipng`, 'linux', 'x64').src(`${url}freebsd/x86/optipng`, 'freebsd', 'x86').src(`${url}freebsd/x64/optipng`, 'freebsd', 'x64').src(`${url}sunos/x86/optipng`, 'sunos', 'x86').src(`${url}sunos/x64/optipng`, 'sunos', 'x64').src(`${url}win/optipng.exe`, 'win32').dest(path.resolve(__dirname, '../vendor')).use(process.platform === 'win32' ? 'optipng.exe' : 'optipng');]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA['use strict';const os = require('os');const path = require('path');const binBuild = require('bin-build');const bin = require('.');const cpuNumber = Math.max(os.cpus().length, 1);bin.run(['-version']).then(() => {console.log('mozjpeg pre-build test passed successfully');}).catch(async error => {console.warn(error.message);console.warn('mozjpeg pre-build test failed');console.info('compiling from source');let cfgExtras = '';if (process.platform === 'darwin') {cfgExtras = 'libpng_LIBS=\'/usr/local/lib/libpng16.a -lz\' --enable-static';}const cfg = [`./configure --enable-static --disable-shared --disable-dependency-tracking --with-jpeg8 ${cfgExtras}`,`--prefix="${bin.dest()}" --bindir="${bin.dest()}" --libdir="${bin.dest()}"`].join(' ');try {await binBuild.file(path.resolve(__dirname, '../vendor/source/mozjpeg.tar.gz'), ['autoreconf -fiv',cfg,`make -j${cpuNumber}`,`make install -j${cpuNumber}`]);console.log('mozjpeg built successfully');} catch (error) {console.error(error.stack);// eslint-disable-next-line unicorn/no-process-exitprocess.exit(1);}});]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA['use strict';const path = require('path');const binBuild = require('bin-build');const bin = require('./index.js');(async () => {try {await bin.run(['--version']);console.log('optipng pre-build test passed successfully');} catch (error) {console.warn(error.message);console.warn('optipng pre-build test failed');console.info('compiling from source');try {// From https://sourceforge.net/projects/optipng/files/OptiPNG/await binBuild.file(path.resolve(__dirname, '../vendor/source/optipng.tar.gz'), [`./configure --with-system-zlib --prefix="${bin.dest()}" --bindir="${bin.dest()}"`,'make install']);console.log('optipng built successfully');} catch (error) {console.error(error.stack);// eslint-disable-next-line unicorn/no-process-exitprocess.exit(1);}}})();]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA['use strict';const path = require('path');const BinWrapper = require('bin-wrapper');const pkg = require('../package.json');const url = `https://raw.githubusercontent.com/imagemin/jpegtran-bin/v${pkg.version}/vendor/`;module.exports = new BinWrapper().src(`${url}macos/jpegtran`, 'darwin').src(`${url}linux/x86/jpegtran`, 'linux', 'x86').src(`${url}linux/x64/jpegtran`, 'linux', 'x64').src(`${url}freebsd/x86/jpegtran`, 'freebsd', 'x86').src(`${url}freebsd/x64/jpegtran`, 'freebsd', 'x64').src(`${url}sunos/x86/jpegtran`, 'sunos', 'x86').src(`${url}sunos/x64/jpegtran`, 'sunos', 'x64').src(`${url}win/x86/jpegtran.exe`, 'win32', 'x86').src(`${url}win/x64/jpegtran.exe`, 'win32', 'x64').src(`${url}win/x86/libjpeg-62.dll`, 'win32', 'x86').src(`${url}win/x64/libjpeg-62.dll`, 'win32', 'x64').dest(path.join(__dirname, '../vendor')).use(process.platform === 'win32' ? 'jpegtran.exe' : 'jpegtran');]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA['use strict';const path = require('path');const binBuild = require('bin-build');const log = require('logalot');const bin = require('.');const args = ['-copy','none','-optimize','-outfile',path.join(__dirname, '../test/fixtures/test-optimized.jpg'),path.join(__dirname, '../test/fixtures/test.jpg')];bin.run(args).then(() => {log.success('jpegtran pre-build test passed successfully');}).catch(async error => {log.warn(error.message);log.warn('jpegtran pre-build test failed');log.info('compiling from source');const cfg = ['./configure --disable-shared',`--prefix="${bin.dest()}" --bindir="${bin.dest()}"`].join(' ');try {await binBuild.file(path.resolve(__dirname, '../vendor/source/libjpeg-turbo-1.5.1.tar.gz'), ['touch configure.ac aclocal.m4 configure Makefile.am Makefile.in',cfg,'make install']);log.success('jpegtran built successfully');} catch (error) {log.error(error.stack);// eslint-disable-next-line unicorn/no-process-exitprocess.exit(1);}});]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA['use strict';const fs = require('fs');const path = require('path');const test = require('ava');const execa = require('execa');const tempy = require('tempy');const binCheck = require('bin-check');const binBuild = require('bin-build');const compareSize = require('compare-size');const jpegtran = require('..');test('rebuild the jpegtran binaries', async t => {const temporary = tempy.directory();const cfg = ['./configure --disable-shared',`--prefix="${temporary}" --bindir="${temporary}"`].join(' ');await binBuild.file(path.resolve(__dirname, '../vendor/source/libjpeg-turbo-1.5.1.tar.gz'), [cfg,'make install']);t.true(fs.existsSync(path.join(temporary, 'jpegtran')));});test('return path to binary and verify that it is working', async t => {t.true(await binCheck(jpegtran, ['-version']));});test('minify a JPG', async t => {const temporary = tempy.directory();const src = path.join(__dirname, 'fixtures/test.jpg');const dest = path.join(temporary, 'test.jpg');const args = ['-outfile',dest,src];await execa(jpegtran, args);const result = await compareSize(src, dest);t.true(result[dest] < result[src]);});]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA['use strict';const path = require('path');const BinWrapper = require('bin-wrapper');const pkg = require('../package.json');const url = `https://raw.githubusercontent.com/imagemin/mozjpeg-bin/v${pkg.version}/vendor/`;module.exports = new BinWrapper().src(`${url}macos/cjpeg`, 'darwin').src(`${url}linux/cjpeg`, 'linux').src(`${url}win/cjpeg.exe`, 'win32').dest(path.join(__dirname, '../vendor')).use(process.platform === 'win32' ? 'cjpeg.exe' : 'cjpeg');]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>music</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="http://aciano.top/redirect/?target=https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css"> <script src="http://aciano.top/redirect/?target=https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js"></script> <script src="http://aciano.top/redirect/?target=https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js"></script>     <div id="aplayer-iMJWHYCb" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="7868005687" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="1000px" data-preload="auto" data-theme="#555"    ></div>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>archives</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
